#!/usr/bin/env python

import os
import time
import readline
from argparse import ArgumentParser
import boto.ec2
import ansible.runner
from ansible import inventory

class AWSConnection:
    def __init__(self, options, environment):
        # Try grab AWS credentials from ENV variables if set
        creds = {}
        creds["key"] = options.key if options.key else environment.get("AWS_ACCESS_KEY_ID")
        creds["secret"] = options.secret if options.secret else environment.get("AWS_SECRET_ACCESS_KEY")

        # Create a connection to specified region
        if not creds["key"] or not creds["secret"]:
            print "AWS key and secret must be set."
            exit(1)

        self.connection = boto.ec2.connect_to_region(options.region,
                    aws_access_key_id=creds["key"], aws_secret_access_key=creds["secret"])

class SpotRequestCancellation:

    termination_marker = 'request-canceled-and-instance-running'

    def __init__(self, options, environment):
        self.queue = set()
        self.issued = 0
        self.failed = 0
        self.connection = AWSConnection(options, environment
                ).connection

    def add(self, spot_id):
        self.queue.add(spot_id)

    def requests(self):
        return len(self.queue)

    def issued(self):
        return int(self.issued)

    def failed(self):
        return int(self.failed)

    def completed(self):
        while(self.connection.get_all_spot_instance_requests(
            filters={'status-code': self.termination_marker})) < (self.issued + self.failed):
            print "Waiting for cancellation requests to propagate..."
            time.sleep(5)

        return self.connection.get_all_spot_instance_requests(filters={'status-code': self.termination_marker})

    def process(self):
        for spot_id in self.queue:
            print "Issuing spot request cancellation for %s..."  % spot_id
            try:
                self.connection.cancel_spot_instance_requests(spot_id)
                self.issued += 1
            except:
                print "Failed to cancel request for %s" % spot_id
                self.failed += 1

class InstanceTermination:
    def __init__(self, options, environment):
        self.queue = set()
        self.connection = AWSConnection(options, os.environ
                ).connection

    def add(self, hostname):
        self.queue.add(hostname)

    def requests(self):
        return len(self.queue)

    def hosts(self):
        return self.queue

    def process(self):
        instance_ids = []
        for hostname in self.queue:
            # Find specified instance
            reservations = self.connection.get_all_instances(filters={'dns-name':hostname})
            for instance in [i for r in reservations for i in r.instances]:
                instance_ids.append(instance.id)

        self.connection.terminate_instances(instance_ids)
        print "Done."

class Console:
    # Some helpers
    @staticmethod
    def continue_or_exit(question):
        response = raw_input("%s (y/n) " % question)
        if response.strip() != 'y':
            print "Okay, exiting."
            exit(0)
        return True

    @staticmethod
    def prompt(question):
        response = raw_input("%s (y/n) " % question)
        if response.strip() != 'y':
            return False
        return True

def main():
    parser = ArgumentParser(description='Manage your warrior cluster.')
    parser.add_argument('-k', '--key', help='AWS key.')
    parser.add_argument('-s', '--secret', help='AWS secret.')
    parser.add_argument('-r', '--region', help='The AWS region to operate in.', required=True)
    parser.add_argument('-l', '--lines', type=int, default=10, help='Number of lines of console output to show from each warrior.')
    options = parser.parse_args()

    connection = AWSConnection(options, os.environ).connection

    print "Collecting information about your spot instances in %s..." % options.region

    # Build up a dictionary of information we'll need to manage the machines
    spot_requests = {}
    for spot in connection.get_all_spot_instance_requests():
        spot_requests[spot.id] = {
                'instance_id': spot.instance_id,
                'state':spot.state,
            }

    # Finding running spot instances, populate host field
    reservations = connection.get_all_instances(filters={
        'instance-lifecycle':'spot',
        'instance-state-name': 'running'
    })
    for instance in [i for r in reservations for i in r.instances]:
        for spot_id, machine in spot_requests.copy().iteritems():
            if machine['instance_id'] == instance.id:
                spot_requests[spot_id]['host'] = instance.public_dns_name

    # Ah, list comprehensions
    running_instances = [m[1] for req in spot_requests.itervalues() for m in req.iteritems() if m[0] == 'host']
    request_state = [m[1] for req in spot_requests.itervalues() for m in req.iteritems() if m[0] == 'state']

    if len(running_instances) == 0 and len(spot_requests) == 0:
        print "Found no spot instances, exiting..."
        exit(0)

    elif len(running_instances) == 0 and ('open' in request_state or 'active' in request_state):
        current = [state for state in request_state if state in ['active','open']]
        print "No instances running, but %d open requests found." % len(current)

        if Console.continue_or_exit("Do you wish to cancel these?"):
            spot_request_cancel = SpotRequestCancellation(options, os.environ)
            for spot_id, machine in spot_requests.iteritems():
                if machine['state'] in ['active', 'open']:
                    spot_request_cancel.add(spot_id)
            spot_request_cancel.process()
            spot_requests = spot_request_cancel.completed()

    elif len(running_instances) > 0:
        Console.continue_or_exit("Found %d running spot instances - continue?" % (len(running_instances)))

        print "Running machine checks. This could take a while if there's a lot of instances..."

        inventory_manager = inventory.Inventory(running_instances)

        results = ansible.runner.Runner(
            inventory=inventory_manager,
            module_name="command",
            module_args="find /var/log/supervisor/ -name 'warrior-stdout*' -exec tail -n %s {} +" % (options.lines),
            remote_user="ubuntu",
            sudo=True,
            transport="ssh",
            ).run()

        if 'dark' in results:
            if len(results['dark']) > 0:
                print "Contact failures:"
                for host, reason in results['dark'].iteritems():
                    print "  %s (%s)" % (host, reason['msg'])

        spot_request_cancel = SpotRequestCancellation(options, os.environ)
        terminate = InstanceTermination(options, os.environ)

        for hostname, machine in results['contacted'].iteritems():
            print "\nConsole output from warrior:"
            print "----------------------------"
            if machine['stdout']:
                print machine['stdout']
            else:
                print "No output, this probably means the warrior failed to initialize at all."
            print "----------------------------\n"
            if not Console.prompt("Terminate this warrior?"):
                print "Warrior will continue."
            else:
                spot_request_cancel.add(spot_id)
                terminate.add(hostname)
                print "Warrior queued for termination."

        if terminate.requests() == 0:
            print "No instances marked for termination."
        else:
            # Terminate corresponding spot requests
            for spot_id, details in spot_requests.iteritems():
                if 'host' in details and details['host'] in terminate.hosts():
                    spot_request_cancel.add(spot_id)
            spot_request_cancel.process()
            spot_request_cancel.completed()

            # Terminate instances
            if Console.continue_or_exit("Terminate %s instances marked '%s' in %s?" % (terminate.requests(), spot_request_cancel.termination_marker, options.region)):
                terminate.process()
    else:
        print "Nothing to do! Exiting."

if __name__ == "__main__":
    main()
